// --- –ß–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ---
def targetClassName = binding.variables.TARGET_CLASS_NAME
def testMethodsData = binding.variables.TEST_METHODS_DATA

println "[dsl] üéØ –¶–µ–ª–µ–≤–æ–π –∫–ª–∞—Å—Å: ${targetClassName}"
println "[dsl] üìù –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Ç–æ–¥–∞—Ö:"
println testMethodsData

// --- –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç–æ–¥–∞—Ö ---
def classes = [:]

testMethodsData.split('\n').each { line ->
    line = line.trim()

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (line.startsWith('#') || line.isEmpty()) {
        return
    }

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞: className=method1,method2,method3
    def parts = line.split('=')
    if (parts.length == 2) {
        def className = parts[0].trim()
        def methods = parts[1].split(',').collect { it.trim() }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–ª–µ–≤–æ–º—É
        if (className.endsWith(targetClassName)) {
            classes[className] = methods
            println "[dsl] ‚úÖ –ù–∞–π–¥–µ–Ω –∫–ª–∞—Å—Å: ${className} —Å –º–µ—Ç–æ–¥–∞–º–∏: ${methods}"
        }
    }
}

// --- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω—ã –ª–∏ —Ç–µ—Å—Ç—ã ---
if (classes.isEmpty()) {
    println "[dsl] ‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ ${targetClassName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –¥–∂–æ–±—ã –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã."
    return
}

// --- –°–æ–∑–¥–∞–µ–º –¥–∂–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ ---
classes.each { className, methods ->
    def simpleClassName = className.tokenize('.').last()

    println "[dsl] üìÅ –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –∫–ª–∞—Å—Å–∞: ${simpleClassName}"

    // --- –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è –∫–ª–∞—Å—Å–∞ ---
    folder("TestJobs/${simpleClassName}") {
        description("–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∂–æ–±—ã –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}")
    }

    // --- –°–æ–∑–¥–∞—ë–º MultiJob –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ ---
    multiJob("TestJobs/${simpleClassName}/${simpleClassName}_AllTests") {
        description("MultiJob –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–ª–∞—Å—Å–∞ ${className}")

        // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ MultiJob —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ ui –∞–≥–µ–Ω—Ç–µ
        label('ui')

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SCM –¥–ª—è MultiJob
        scm {
            git {
                remote {
                    url('https://github.com/DariaGuzich/ApiForJenkin.git')
                }
                branch('master')
            }
        }

        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–∑—É —Å –¥–∂–æ–±–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
        steps {
            phase("Run all ${simpleClassName} tests") {
                continuationCondition('SUCCESSFUL')
                methods.each { method ->
                    phaseJob("TestJobs/${simpleClassName}/${simpleClassName}_${method}") {
                        currentJobParameters()
                    }
                }
            }
        }

        // –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è MultiJob
        publishers {
            archiveJunit('**/target/surefire-reports/*.xml') {
                allowEmptyResults()
            }
        }
    }

    // --- –°–æ–∑–¥–∞—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –¥–∂–æ–±—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ ---
    methods.each { method ->
        def jobName = "${simpleClassName}_${method}"

        println "[dsl]   üìù –°–æ–∑–¥–∞—ë–º –¥–∂–æ–±—É: ${jobName}"

        job("TestJobs/${simpleClassName}/${jobName}") {
            description("–î–∂–æ–±–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞ ${className}#${method}")

            // –í–ê–ñ–ù–û: –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –¥–∂–æ–±–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–∞ ui –∞–≥–µ–Ω—Ç–µ
            label('ui')

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SCM
            scm {
                git {
                    remote {
                        url('https://github.com/DariaGuzich/ApiForJenkin.git')
                    }
                    branch('master')
                }
            }

            // –®–∞–≥–∏ —Å–±–æ—Ä–∫–∏
            steps {
                // Shell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                shell('''
                    echo "=== Cleaning screenshots ==="
                    rm -rf screenshots/*.png target/screenshots/*.png
                    mkdir -p screenshots target/screenshots
                    echo "Old screenshots cleared"
                    
                    echo "=== Current workspace ==="
                    pwd
                    ls -la
                ''')

                // Maven –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
                maven {
                    goals('clean test')
                    mavenOpts("-Dtest=${className}#${method}")
                    // –ï—Å–ª–∏ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω Maven –≤ Jenkins, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –∏–º—è:
                    // mavenInstallation('Maven-3.8.6')
                }
            }

            // –ü—É–±–ª–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            publishers {
                // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ JUnit —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                archiveJunit('**/target/surefire-reports/*.xml') {
                    allowEmptyResults()
                    testDataPublishers {
                        allowClaimingOfFailedTests()
                        publishTestStabilityData()
                    }
                }

                // –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
                archiveArtifacts {
                    pattern('screenshots/*.png')
                    pattern('target/screenshots/*.png')
                    allowEmpty(true)
                    fingerprint(false)
                    onlyIfSuccessful(false)
                }

                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: HTML –æ—Ç—á–µ—Ç—ã –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ
                // publishHtml {
                //     report('target/site/surefire-report.html') {
                //         reportName('Test Results')
                //         allowMissing(true)
                //     }
                // }
            }
        }
    }

    println "[dsl] ‚úÖ –°–æ–∑–¥–∞–Ω–æ: –ø–∞–ø–∫–∞ ${simpleClassName}, MultiJob –∏ ${methods.size()} –¥–∂–æ–±(–∞) –¥–ª—è –∫–ª–∞—Å—Å–∞ ${className}"
}

println "[dsl] üéâ –í—Å—ë –≥–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–ª–∞—Å—Å–æ–≤: ${classes.size()}"